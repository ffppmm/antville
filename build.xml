<?xml version="1.0" encoding="utf-8"?>

<project name="antville" default="usage" basedir=".">
    <target name="help" depends="usage"/>
    <target name="usage">
        <echo message="Antville Build Instructions"/>
        <echo message="==========================="/>
        <echo message="Available targets are:"/>
        <echo message="   all        Generate the Antville and AntClick packages"/>
        <echo message="   antville   Generate the Antville packages"/>
        <echo message="   antclick   Generate the AntClick packages"/>
        <echo message="   release    Copy packages to the download server"/>
        <echo message="   docs       Generate the API documentation"/>
        <echo message="   pot        Extract gettext call strings into POT file"/>
        <echo message="   messages   Generate JavaScript message files"/>
        <echo message="   clean      Clean up build directory"/>
        <echo message="   patch      Apply patch file to Antville installation"/>
        <echo message="   usage      Show these build instructions (default)"/>
    </target>

    <target name="all" depends="antville, antclick"/>

    <target name="init">
        <tstamp>
            <format property="date" pattern="d MMM yyyy" locale="en"/>
        </tstamp>

        <property name="name" value="antville"/>
        <property name="year" value="1998-${year}"/>
        <property name="version" value="1.3\u03b1"/>
        <property name="package.name" value="${name}-${version}"/>

        <property name="antville.src" value="http://antville.googlecode.com/svn/trunk"/>
        <property name="helma.src" value="http://dev.helma.org/svn/helma/helma/trunk"/>
        <property name="apps.src" value="http://dev.helma.org/svn/apps"/>

        <property name="build.dir" location="${basedir}/build"/>
        <property file="${build.dir}/build.properties"/>

        <property name="helma.dir" location="${basedir}/../.."/>
        <property name="extra.dir" location="${build.dir}/extra"/>
        <property name="dist.dir" location="${build.dir}/dist"/>
        <property name="work.dir" location="${build.dir}/work"/>
        <property name="modules.dir" location="${work.dir}/modules"/>
        <property name="apps.dir" location="${work.dir}/apps"/>
        <property name="antville.dir" location="${apps.dir}/antville"/>
        <property name="hopkit.dir" location="${helma.dir}/modules/jala/util/HopKit"/>

        <property name="docs.title" value="Antville&amp;#32;${version}&amp;#32;API&amp;#32;Reference"/>
        <property name="docs.infiles" location="${basedir}/code"/>
        <property name="docs.outfiles" location="${basedir}/docs"/>

        <property name="i18n.scan" value="code compat"/>
        <property name="i18n.destination" location="${basedir}/i18n"/>
        <property name="i18n.poDirectory" location="${i18n.destination}"/>
        <property name="i18n.template" location="${i18n.destination}/antville.pot"/>
        <property name="i18n.namespace" value=""/>

        <exec dir="${build.dir}" executable="sh" outputproperty="revision">
            <arg value="-c"/>
            <arg value="svn info ${antville.src} | awk &quot;/Last Changed Rev:/&quot;'{print $4;}'"/>
        </exec>

        <replace file="${antville.dir}/code/Root/Root.js" token="@version@" value="${version}"/>
        <replace file="${antville.dir}/code/Root/Root.js" token="@revision@" value="${revision}"/>
        <replace file="${antville.dir}/code/Root/Root.js" token="@buildDate@" value="${date}"/>
    </target>

    <target name="export" depends="init">
        <mkdir dir="${apps.dir}"/>
        <exec dir="${apps.dir}" executable="svn">
            <arg line="export --ignore-externals ${antville.src} antville"/>
        </exec>
        <delete includeemptydirs="true">
            <fileset dir="${antville.dir}" includes="build.xml build/** docs/** i18n/*.po*"/>
        </delete>
        <replace file="${antville.dir}/code/Root/Root.js" token="__version__" value="${version}"/>
        <replace file="${antville.dir}/code/Root/Root.js" token="__revision__" value="${revision}"/>
        <replace file="${antville.dir}/code/Root/Root.js" token="__buildDate__" value="${TSTAMP}"/>
    </target>

    <target name="ville" depends="antville"/>
    <target name="antville" depends="export">
        <antcall target="make-tar">
            <param name="filename" value="${package.name}"/>
            <param name="path" value="${antville.dir}"/>
        </antcall>
        <antcall target="make-zip">
            <param name="filename" value="${package.name}"/>
            <param name="path" value="${antville.dir}"/>
        </antcall>
    </target>

    <target name="click" depends="antclick"/>
    <target name="antclick" depends="export">
        <exec dir="${work.dir}" executable="svn">
            <arg line="export ${helma.src}/lib"/>
        </exec>
        <exec dir="${work.dir}" executable="svn">
            <arg line="export ${apps.src}/modules/trunk modules"/>
        </exec>
        <exec dir="${work.dir}" executable="svn">
            <arg line="export ${helma.src}/licenses"/>
        </exec>
        <exec dir="${work.dir}" executable="svn">
            <arg line="export ${helma.src}/license.txt"/>
        </exec>
        <exec dir="${apps.dir}" executable="svn">
            <arg line="export ${apps.src}/manage/trunk manage"/>
        </exec>
        <exec dir="${extra.dir}" executable="cp">
            <arg line="-p start.sh ${work.dir}"/>
        </exec>

        <copy todir="${work.dir}">
            <fileset dir="${extra.dir}" includes="start.bat apps.properties
					server.properties launcher.jar"/>
        </copy>
        <copy file="${extra.dir}/helma.jar" todir="${work.dir}/lib"/>
        <copy file="${extra.dir}/h2-1.2.136.jar" todir="${work.dir}/lib/ext"/>
        <copy file="${extra.dir}/h2.txt" todir="${work.dir}/licenses"/>
        <copy todir="${build.dir}/work/db">
            <fileset dir="${extra.dir}" includes="antville.h2.db"/>
        </copy>
        <move file="${work.dir}/license.txt" tofile="${work.dir}/licenses/helma.txt"/>
        <move todir="${work.dir}/licenses">
            <fileset dir="${antville.dir}/legal" includes="**"/>
        </move>

        <delete includeemptydirs="true">
            <fileset dir="${modules.dir}" includes="test/**"/>
        </delete>
        <delete>
            <fileset dir="${modules.dir}/helma" includes="*.jar Search.js Ssh.js Chart.js"/>
        </delete>
        <delete includeemptydirs="true">
            <fileset dir="${modules.dir}/jala" includes="build.properties docs/** lib/** tests/** util/**"/>
        </delete>
        <delete dir="${antville.dir}/legal"/>

        <antcall target="make-zip">
            <param name="filename" value="antclick-${version}"/>
            <param name="path" value="${work.dir}"/>
        </antcall>
        <antcall target="make-tar">
            <param name="filename" value="antclick-${version}"/>
            <param name="path" value="${work.dir}"/>
        </antcall>
    </target>

    <target name="docs" depends="init">
        <exec dir="${build.dir}/jsdoc-toolkit" executable="${build.dir}/jsdoc-toolkit/jsrun.sh">
            <arg line='-D="title:${docs.title}" -q -r=2 -p -t=templates/jsdoc
				-d=${docs.outfiles} ${docs.infiles}'/>
        </exec>
    </target>

    <target name="pot" depends="init">
        <echo message="${helma.dir}"/>
        <java dir="${helma.dir}" classpath="${helma.dir}/launcher.jar" classname="helma.main.launcher.Commandline"
              fork="true">
            <!-- Root.extractMessages is currently located in Global/i18n.js -->
            <arg value="antville.extractMessages"/>
            <arg value="${build.dir}/MessageParser.js"/>
            <arg value="${i18n.scan}"/>
            <arg value="${i18n.template}"/>
        </java>
    </target>

    <target name="messages" depends="init">
        <java dir="${helma.dir}" classpath="${helma.dir}/lib/rhino.jar"
              classname="org.mozilla.javascript.tools.shell.Main">
            <arg value="${build.dir}/PoParser.js"/>
            <arg value="${i18n.poDirectory}"/>
            <arg value="${i18n.destination}"/>
            <arg value="${i18n.namespace}"/>
        </java>
    </target>

    <target name="make-tar" depends="init">
        <mkdir dir="${dist.dir}"/>
        <fixcrlf srcdir="${path}" eol="lf" eof="remove" includes="**/*.txt,
      		**/*.properties, **/*.hac, **/*.js, **/*.skin, **/.xml, **/.sh"/>
        <tar tarfile="${dist.dir}/${filename}.tar" basedir="${path}" excludes="**">
            <tarfileset prefix="${filename}" dir="${path}" mode="755">
                <include name="**/*.sh"/>
            </tarfileset>
            <tarfileset prefix="${filename}" dir="${path}">
                <include name="**"/>
                <exclude name="**/*.sh"/>
            </tarfileset>
        </tar>
        <bzip2 zipfile="${dist.dir}/${filename}.tbz" src="${dist.dir}/${filename}.tar"/>
        <delete file="${dist.dir}/${filename}.tar"/>
    </target>

    <target name="make-zip" depends="init">
        <mkdir dir="${dist.dir}"/>
        <fixcrlf srcdir="${path}" eol="crlf" includes="**/*.txt, **/*.properties,
      		**/*.hac, **/*.js, **/*.skin, **/*.xml, **/.bat"/>
        <zip zipfile="${dist.dir}/${filename}.zip">
            <zipfileset dir="${path}" prefix="${filename}" includes="**"/>
        </zip>
    </target>

    <target name="release" depends="init">
        <property name="antville.summary"
                  value="Helma application providing high performance, full featured weblog hosting"/>
        <property name="antclick.summary"
                  value="The lightweight all-in-one package which contains everything you need to run Antville on your computer"/>
        <antcall target="upload">
            <param name="file" value="${dist.dir}/${package.name}.tbz"/>
            <param name="summary" value="${antville.summary}"/>
            <param name="labels" value="Type-Package, OpSys-All, Featured"/>
        </antcall>
        <antcall target="upload">
            <param name="file" value="${dist.dir}/${package.name}.zip"/>
            <param name="summary" value="${antville.summary}"/>
            <param name="labels" value="Type-Package, OpSys-Windows"/>
        </antcall>
        <antcall target="upload">
            <param name="file" value="${dist.dir}/antclick-${version}.tbz"/>
            <param name="summary" value="${antclick.summary}"/>
            <param name="labels" value="Type-Package, OpSys-All"/>
        </antcall>
        <antcall target="upload">
            <param name="file" value="${dist.dir}/antclick-${version}.zip"/>
            <param name="summary" value="${antclick.summary}"/>
            <param name="labels" value="Type-Package, OpSys-Windows, Featured"/>
        </antcall>
    </target>

    <target name="upload" depends="file-exists" if="file.exists">
        <taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask"
                 classpath="${build.dir}/ant-googlecode-0.0.2.jar" name="gcupload"/>
        <gcupload username="${google.username}" password="${google.password}" projectname="antville" filename="${file}"
                  targetfilename="${file}" summary="${summary}" labels="${labels}"/>
    </target>

    <target name="file-exists" unless="file.exists">
        <available property="file.exists" file="${file}"/>
    </target>

    <target name="clean" depends="init">
        <delete dir="${work.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="patch" depends="init">
        <input message="Please enter the patch ID: " addproperty="patch.id"/>
        <loadfile property="patch" srcFile="${basedir}/extra/updater/patch-${patch.id}.js"/>
        <echo message="${patch}"/>
        <input message="Apply the displayed patch? " validargs="y,n" addproperty="patch.confirm"/>
        <condition property="patch.abort">
            <equals arg1="${patch.confirm}" arg2="n" casesensitive="false" trim="true"/>
        </condition>
        <fail if="patch.abort">Build aborted by user.</fail>
        <java dir="${helma.dir}" classpath="${helma.dir}/launcher.jar" classname="helma.main.launcher.Commandline"
              fork="true">
            <arg value="antville.patch"/>
            <arg value="${patch}"/>
        </java>
    </target>
</project>
